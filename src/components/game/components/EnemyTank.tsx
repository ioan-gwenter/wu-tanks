/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three'
import React, { useRef } from 'react'
import { useGLTF } from '@react-three/drei'
import { GLTF } from 'three-stdlib'

type GLTFResult = GLTF & {
    nodes: {
        Body: THREE.Mesh
        Tracks003: THREE.Mesh
        Tracks003_1: THREE.Mesh
        Head: THREE.Mesh
        Barrel004: THREE.Mesh
        Barrel004_1: THREE.Mesh
    }
    materials: {
        ['BodyFlat.001']: THREE.MeshStandardMaterial
        TracksLight: THREE.MeshStandardMaterial
        ['TracksDark.001']: THREE.MeshStandardMaterial
    }
}

type EnemyTankProps = JSX.IntrinsicElements['group'] & {
    headRotation?: number;
    bodyRotation?: number;
    color?: string; // Optional color for BodyFlat material
};

export function EnemyTank({
    headRotation = 0, // Default rotation
    bodyRotation = 0, // Default rotation
    color = '#00F0AF', // Default BodyFlat color
    ...props
}: EnemyTankProps) {
    const { nodes, materials } = useGLTF('/models/EnemyTank.glb') as GLTFResult;

    materials['BodyFlat.001'].color = new THREE.Color(color);

    return (
        <group {...props} dispose={null}>
            <group name="Scene">
                <mesh
                    name="Body"
                    castShadow
                    receiveShadow
                    geometry={nodes.Body.geometry}
                    material={materials['BodyFlat.001']}
                    rotation={[0, bodyRotation, -Math.PI]}
                    scale={[-0.13, -0.052, -0.17]}
                    userData={{ name: 'Body' }}>
                    <group name="Tracks" scale={[1.3, 0.952, 0.952]} userData={{ name: 'Tracks' }}>
                        <mesh
                            name="Tracks003"
                            castShadow
                            receiveShadow
                            geometry={nodes.Tracks003.geometry}
                            material={materials.TracksLight}
                        />
                        <mesh
                            name="Tracks003_1"
                            castShadow
                            receiveShadow
                            geometry={nodes.Tracks003_1.geometry}
                            material={materials['TracksDark.001']}
                        />
                    </group>
                </mesh>
                <mesh
                    name="Head"
                    castShadow
                    receiveShadow
                    geometry={nodes.Head.geometry}
                    material={materials['BodyFlat.001']}
                    position={[0, 0.164, 0]}
                    rotation={[-Math.PI, headRotation, -Math.PI]}
                    scale={[0.098, 0.061, 0.098]}
                    userData={{ name: 'Head' }}>
                    <group
                        name="Barrel"
                        position={[0, -0.372, 0.939]}
                        rotation={[-Math.PI, 0, -Math.PI]}
                        scale={[-0.144, -0.233, -0.144]}
                        userData={{ name: 'Barrel' }}>
                        <mesh
                            name="Barrel004"
                            castShadow
                            receiveShadow
                            geometry={nodes.Barrel004.geometry}
                            material={materials['TracksDark.001']}
                        />
                        <mesh
                            name="Barrel004_1"
                            castShadow
                            receiveShadow
                            geometry={nodes.Barrel004_1.geometry}
                            material={materials.TracksLight}
                        />
                    </group>
                </mesh>
            </group>
        </group>
    )
}

useGLTF.preload('/models/EnemyTank.glb')
